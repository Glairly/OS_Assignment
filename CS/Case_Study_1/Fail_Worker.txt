using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Threading;

namespace Problem01
{
    class Program
    {
        static byte[] Data_Global = new byte[1000000000];
        static long Sum_Global = 0;
        static int G_index = 0;
        static Thread t1,t2,t3,t4;
        // 30667ms

        static int ReadData()
        {
            int returnData = 0;
            FileStream fs = new FileStream("Problem01.dat", FileMode.Open);
            BinaryFormatter bf = new BinaryFormatter();

            try 
            {
                Data_Global = (byte[]) bf.Deserialize(fs);
            }
            catch (SerializationException se)
            {
                Console.WriteLine("Read Failed:" + se.Message);
                returnData = 1;
            }
            finally
            {
                fs.Close();
            }

            return returnData;
        }
        static void sum()
        {
            // time reduced by changed data ref method
            int val = Data_Global[G_index];
            int o = 0;
            if (val % 2 == 0)
            {
                o -= val;
            }
            else if (val % 3 == 0)
            {
                o += (val * 2);
            }
            else if (val % 5 == 0)
            {
                o += (val / 2);
            }
            else if (val % 7 == 0)
            {
                o += (val / 3);
            }
            Data_Global[G_index] = 0;
            Interlocked.Add(ref Sum_Global,o);
            Interlocked.Increment(ref G_index);
        }

        static void task(int start,int stop){
                for(int i = start;i < stop;++i)
                {
                     sum();
                }
        }


        static void Main(string[] args)
        {
            Stopwatch sw = new Stopwatch();
            int y;
            const long correct = 888701676;
            const int  approxDefaultRuntime = 30000;

            /* Read data from file */
            Console.Write("Data read...");
            y = ReadData();
            if (y == 0)
            {
                Console.WriteLine("Complete.");
            }
            else
            {
                Console.WriteLine("Read Failed!");
            }

            var cores = 4;
            var divider = 1000000000/cores;

            var t_array = new Thread[cores];
         
            /* Start */
            Console.Write("\n\nWorking...");
            sw.Start();


            // add worker doesn't work
            for (; G_index < 500;) {
                // add workers
                for(int j = 0; j < cores; ++j){
                   G_index++;   
                    t_array[j] = new Thread(sum);
                    t_array[j].Start();
                 }

                 for(int j = 0; j < cores; ++j){
                    t_array[j].Join();
                 }

            }

            sw.Stop();
            Console.WriteLine("Done.");

            /* Result */
            // long s = 0;
            // Array.ForEach(Sum_Global, i => s += i);
            long s = Sum_Global;
            Console.WriteLine("Summation result: {0}", s);
            Console.WriteLine("Time used: " + sw.ElapsedMilliseconds.ToString() + "ms");
            Console.WriteLine("Time Reduced: {0}%", (1 - (sw.ElapsedMilliseconds * 1.0)/(approxDefaultRuntime * 1.0)).ToString("N2") );
            Console.WriteLine("Summation Correctness: {0}", s == correct);
        }
    }
}
