
using System;
using System.Threading;

namespace OS_Problem_02
{
    class Thread_safe_buffer
    {
        static int[] TSBuffer = new int[10];
        static int Front = 0;
        static int Back = 0;
        static int Count = 0;
        static Object _Lock = new Object();

        static void EnQueue(int eq)
        {
            TSBuffer[Back] = eq;
            Back++;
            Back %= 10;
            Count += 1;
        }

        static int DeQueue()
        {
            int x = 0;
            x = TSBuffer[Front];
            Front++;
            Front %= 10;
            Count -= 1;
            return x;
        }

        static void th01()
        {
            int i;

            for (i = 1; i < 51; i++)
            {
                lock(_Lock){
                    if(Count >= 10){ 
                        Monitor.Wait(_Lock); 
                    }

                    EnQueue(i);
                    Monitor.Pulse(_Lock);
                    Thread.Sleep(5);
                }
            }
        }

        static void th011()
        {
            int i;

            for (i = 100; i < 151; i++)
            {
                lock(_Lock){
                    if(Count >= 10){ 
                        Monitor.Wait(_Lock); 
                    }

                    EnQueue(i);
                    Monitor.Pulse(_Lock);
                    Thread.Sleep(5);
                }
            }
        }


        static void th02(object t)
        {
            int i;
            int j;

            for (i=0; i< 60; i++)
            {
                lock(_Lock){
                    if(Count <= 0) Monitor.Wait(_Lock);
                    j = DeQueue();
                    Console.WriteLine("j={0}, thread:{1}", j, t);
                    Monitor.Pulse(_Lock);
                    Thread.Sleep(100);
                }
            }
        }

        static void Main(string[] args)
        {
            Thread t1 = new Thread(th01);
            Thread t11 = new Thread(th011);
            
            Thread t2 = new Thread(th02);
            Thread t21 = new Thread(th02);
            Thread t22 = new Thread(th02);

            t1.Start();
            t11.Start();
            t2.Start(1);
            t21.Start(2);
            t22.Start(3);
        }
    }
}

// Bugs
// เมื่อเปิดใช้งาน t11.Start() ทำให้รู้ว่าจาก ver0 เกิดการ Enqueue ซ้ำซ้อนกันระหว่าง t1 และ t11 เนื่องจากการที่ไม่มี Second check จึงทำให้
// เมื่อเวลาที่ t1 หรือ t11 ในรับการปลดล็อค ก็จะทำการ execute code block ถัดไปจากที่มีการ Wait ไป โดยไม่คำนึงถึง Condition ว่าจะตรงหรือไม่
// Debugs
// เปลี่ยน if เป็น while เพื่อให้มีการ Second check

// todo
// [done] Enqueue must wait for queue to be availabled (count < 10) 
// [done] Dequeue must have at least one element (count > 0)
// [] Must sync
// [done] Dequeue must be sequence
// [] if not bring some reason !!?